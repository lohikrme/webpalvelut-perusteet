{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-04T10:05:33.380Z",
    "end": "2024-09-04T10:05:33.496Z",
    "duration": 116,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "99dbc1e1-a185-4768-9a09-34d7b1f93e50",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43354259-1263-48b1-9969-76727ad3ed04",
          "title": "ADD A NEW MOVIE at 'POST /api/movies'",
          "fullFile": "C:\\Users\\Parrot\\viope-webpalvelut\\L03a_movies_postgre\\test\\movie.spec.js",
          "file": "\\test\\movie.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ADD A NEW MOVIE at 'POST /api/movies'\"",
              "fullTitle": "ADD A NEW MOVIE at 'POST /api/movies' \"before each\" hook in \"ADD A NEW MOVIE at 'POST /api/movies'\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "query.deleteAllMovies();\ndone();",
              "err": {},
              "uuid": "56844b4b-d836-44ab-b0b9-65e82a6710c2",
              "parentUUID": "43354259-1263-48b1-9969-76727ad3ed04",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Requires a log in",
              "fullTitle": "ADD A NEW MOVIE at 'POST /api/movies' Requires a log in",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .post('/api/movies')\n  .set('Content-Type', 'application/json')\n  .send(JSON.stringify(testMovie))\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "69594ed2-e9d3-41bb-aea9-e47e52a66b11",
              "parentUUID": "43354259-1263-48b1-9969-76727ad3ed04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expects to log in successfully",
              "fullTitle": "ADD A NEW MOVIE at 'POST /api/movies' expects to log in successfully",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .post('/login')\n  .send({ email: testEmail, password: testPassword })\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    testToken = res.body.token;\n    console.log(`\\n \\n THE TEST TOKEN LOOKS NEXT \\n \\n ${testToken} \\n \\n \\n`)\n    done();\n  });",
              "err": {},
              "uuid": "4a76506a-806c-402d-9a2f-4b3d8d84a724",
              "parentUUID": "43354259-1263-48b1-9969-76727ad3ed04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new movie after login",
              "fullTitle": "ADD A NEW MOVIE at 'POST /api/movies' should add a new movie after login",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .post('/api/movies')\n  .set('Content-Type', 'application/json')\n  .set('Authorization', `Bearer ${testToken}`)\n  .send(JSON.stringify(testMovie))\n  .end((err, res) => {\n    res.should.have.status(201);\n    res.body.should.be.a('object');\n    res.body.should.have.property('title');\n    res.body.should.have.property('title') == 'The Godfather';\n    done();\n  });",
              "err": {},
              "uuid": "d9f95dd9-ff6b-456c-ab66-bb4be5115060",
              "parentUUID": "43354259-1263-48b1-9969-76727ad3ed04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69594ed2-e9d3-41bb-aea9-e47e52a66b11",
            "4a76506a-806c-402d-9a2f-4b3d8d84a724",
            "d9f95dd9-ff6b-456c-ab66-bb4be5115060"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b01b366-af4c-4165-8111-46d0133e16bc",
          "title": "FETCH ALL MOVIES at 'GET /api/movies'",
          "fullFile": "C:\\Users\\Parrot\\viope-webpalvelut\\L03a_movies_postgre\\test\\movie.spec.js",
          "file": "\\test\\movie.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Requires a log in",
              "fullTitle": "FETCH ALL MOVIES at 'GET /api/movies' Requires a log in",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .post('/api/movies')\n  .set('Content-Type', 'application/json')\n  .send(JSON.stringify(testMovie))\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "cc9e7172-1938-4cd6-8358-6f63e55ce366",
              "parentUUID": "7b01b366-af4c-4165-8111-46d0133e16bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expects to log in successfully",
              "fullTitle": "FETCH ALL MOVIES at 'GET /api/movies' expects to log in successfully",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .post('/login')\n  .send({ email: testEmail, password: testPassword })\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    testToken = res.body.token;\n    console.log(`\\n \\n THE TEST TOKEN LOOKS NEXT \\n \\n ${testToken} \\n \\n \\n`)\n    done();\n  });",
              "err": {},
              "uuid": "9d5f4aea-29c2-45a1-b0a7-d8985c556c2b",
              "parentUUID": "7b01b366-af4c-4165-8111-46d0133e16bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch all movies",
              "fullTitle": "FETCH ALL MOVIES at 'GET /api/movies' Fetch all movies",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/api/movies') \n  .set('Authorization', `Bearer ${testToken}`)\n  .end((err, res) => {\n     res.should.have.status(200);\n     res.body.should.be.a('array');\n     res.body.length.should.be.eql(1);\n     done();\n  });",
              "err": {},
              "uuid": "44b0ecb4-2b68-4ed1-ae3f-1913f89f4d71",
              "parentUUID": "7b01b366-af4c-4165-8111-46d0133e16bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc9e7172-1938-4cd6-8358-6f63e55ce366",
            "9d5f4aea-29c2-45a1-b0a7-d8985c556c2b",
            "44b0ecb4-2b68-4ed1-ae3f-1913f89f4d71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}